#summary This page describes some specificities of the server
#labels Phase-Design,Phase-Implementation

= Introduction =

This is a place where anyone can share its ideas concerning the server side. Don't be shy, you are welcome!

= Main steps =

Here are the different steps which happen when the server is launched:

  * loading (see [Loader] for more informations), consisting of a primary load of ini files which contains configurations for each module, then we load one by one each module, if something goes wrong, we jump to the last step without running the server. This part is not crucial but requires a good organisation, so we won't focus on optimisation here, but on factoring.

  * execution (see [Heart]) where the main job is made. This is the crucial part of the program, if something is slow here, everything will be, so it requires a minimum of optimisations and good design. In this part of the program, we treat demands and call the appropriated module (a new connection, a player is moving, ...), this part must not bug whatever happen: no memory left, someone has crashed, fd is invalid, ..., nevermind.

  * cleaning up (see [Cleaner]) which cleans up memory, fds, sockets, ... before leaving the program.

= Error handler =

The current error handler works with a list of error codes (defined in error.h) with an associated message. Why not a simple message? It will be easier for someone having an error to get is code to see on a future wiki how to fix it, than having to remember a full sentence.

When in DEV mode, we also trace the file where the error happened, and the line so as to be able to fix it quickly if it's related to a coding error.

There are two kinds of error:

  * Expected error: this is something that might happen depending on the current configuration of the system or of the user (a port is already used, a .ini file is missing ...), these errors are printed on stderr and are not really important unless we are in development mode, and doing real shit.

  * Unexpected error: this should not happen, but Murphy decided that it (a pointer is NULL, a FD is invalid, ...). These are usefull to the developpers and will be traced in a log file.

  * Expected error codes are > 0
  * Unexpected error codes are < 0