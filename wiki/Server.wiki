#summary This page describes some specificities of the server
#labels Phase-Design,Phase-Implementation

= Introduction =

This is a place where anyone can share its ideas concerning the server side. Don't be shy, you are welcome!

= Main steps =

Here are the different steps which happen when the server is launched:

  * loading (see [Loader] for more informations), consisting of a primary load of ini files which contains configurations for each module, then we load one by one each module, if something goes wrong, we jump to the last step without running the server. This part is not crucial but requires a good organisation, so we won't focus on optimisation here, but on factoring.

  * execution (see [Heart]) where the main job is made. This is the crucial part of the program, if something is slow here, everything will be, so it requires a minimum of optimisations and good design. In this part of the program, we treat demands and call the appropriated module (a new connection, a player is moving, ...), this part must not bug whatever happen: no memory left, someone has crashed, fd is invalid, ..., nevermind.

  * cleaning up (see [Cleaner]) which cleans up memory, fds, sockets, ... before leaving the program.

= Error handler =

The current error handler works with a list of error codes (defined in errors.h/errors.c) with an associated message, and a flag which determine what will be done when raised.

This flag can be set to several combining values which will change the behavior of the server:

  * ERR_T_DISPLAY: the error will be output when in non-daemon mode
  * ERR_T_LOG: the error will be logged in an error file
  * ERR_T_DIE: the server will stop

Some additional flags may appear in the future.